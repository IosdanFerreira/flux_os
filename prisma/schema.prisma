// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  surname  String?
  email    String  @unique
  password String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Client   Client[]
  Service  Service[]
  Vehicle  Vehicle[]
  Employee Employee[]
  worOrder WorkOrder[]

  @@index([email])
  @@map("users")
}

model Client {
  id           Int     @id @default(autoincrement())
  name         String
  surname      String?
  email        String  @unique
  phone        String?
  cpf          String
  rg           String?
  gender       String
  cep          String
  street       String
  number_house String?
  neighborhood String?
  state        String?
  city         String?

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  Vehicle    Vehicle[]
  work_order WorkOrder[]

  @@index([email, name, surname, cpf])
  @@map("clients")
}

model Vehicle {
  id       Int     @id @default(autoincrement())
  make     String
  model    String
  plate    String
  color    String
  comments String?

  client_id Int
  client    Client? @relation(fields: [client_id], references: [id], onDelete: Cascade)

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  WorkOrder WorkOrder[]

  @@index([make, model])
  @@map("vehicles")
}

model Employee {
  id           Int     @id @default(autoincrement())
  name         String
  surname      String?
  email        String  @unique
  phone        String?
  commission   Int
  cpf          String
  rg           String?
  gender       String
  cep          String
  street       String
  number_house String?
  neighborhood String?
  state        String?
  city         String?
  comments     String?

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  WorkOrder WorkOrder[]

  @@index([email, name, surname, cpf])
  @@map("employees")
}

model PaymentForm {
  id         Int         @id @default(autoincrement())
  name       String
  work_order WorkOrder[]

  @@map("payment_forms")
}

model PaymentSituation {
  id         Int         @id @default(autoincrement())
  name       String
  work_order WorkOrder[]

  @@map("payment_situations")
}

model Service {
  id             Int     @id @default(autoincrement())
  name           String
  price          Int
  description    String?
  estimated_time String

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  Work_order ServicesOnWorkOrders[]

  @@index([id, name])
  @@map("services")
}

model WorkOrder {
  id Int @id @default(autoincrement())

  client_id Int
  client    Client? @relation(fields: [client_id], references: [id], onDelete: NoAction)

  vehicle_id Int
  vehicle    Vehicle? @relation(fields: [vehicle_id], references: [id], onDelete: NoAction)

  employee_id Int
  employee    Employee? @relation(fields: [employee_id], references: [id], onDelete: NoAction)

  services_id Int[]
  services    ServicesOnWorkOrders[]

  payment_form_id Int
  payment_form    PaymentForm @relation(fields: [payment_form_id], references: [id])

  init_date String
  init_time String

  end_date String
  end_time String

  payment_situation_id Int
  payment_situation    PaymentSituation @relation(fields: [payment_situation_id], references: [id])

  comments String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  @@index([created_at])
  @@map("work_orders")
}

model ServicesOnWorkOrders {
  service_id   Int
  Service      Service   @relation(fields: [service_id], references: [id])
  workOrder_id Int
  WorkOrder    WorkOrder @relation(fields: [workOrder_id], references: [id])

  @@id([service_id, workOrder_id])
}
